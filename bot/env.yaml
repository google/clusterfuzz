# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default bot configuration (can be overriden with job environment definition).

# TODO(metzman): Don't set things to false, 0, or '' if they can be None.
# TODO(metzman): Figure out how to document non-default variables.

# Application command line arguments.
APP_ARGS: ''

# Flag to indicate if we should append %TESTCASE% at end of application arguments (if it does not
# exist already).
APP_ARGS_APPEND_TESTCASE: true

# Command to launch app (Android, e.g. shell am start ...).
APP_LAUNCH_COMMAND: ''

# Application binary name (including extension).
APP_NAME: ''

# Application binary full paths (release and debug builds).
APP_PATH: ''
APP_PATH_DEBUG: ''

# Flag to indicate if the crashing ASSERTs are security issues.
ASSERTS_HAVE_SECURITY_IMPLICATION: false

# Flag to indicate if we want to do bad build check on the application build. This launches an
# application without a testcase and verifies that it does not crash on startup.
BAD_BUILD_CHECK: true

# Store build artifacts in cache to save network bandwidth.
CACHE_STORE: true

# Flag to indicate if the CHECKs are security issues.
# TODO(ochang): Rename to DCHECKS_HAVE_SECURITY_IMPLICATION once we can distinguish this.
CHECKS_HAVE_SECURITY_IMPLICATION: false

# Number of times to retry a testcase when checking for a crash.
CRASH_RETRIES: 10

# Flag to indicate if CheckJNI flag is enabled (Android).
ENABLE_CHECK_JNI: false

# Flag to indicate if debug checks are enabled (Android).
ENABLE_DEBUG_CHECKS: false

# Number of times to retry in the event of a failed operation.
FAIL_RETRIES: 5

# Seconds to wait in the event of a failed operation.
FAIL_WAIT: 300

# Faster version of warmup timeout, used for bad build checks.
FAST_WARMUP_TIMEOUT: 40

# Flag to indicate if we should create testcases for security bugs only and ignore functional ones.
FILTER_FUNCTIONAL_BUGS: false

# Absolute paths to fuzzer directory. Useful to use in fuzzer launcher script.
FUZZER_DIR: ''

# Maximum time the testcase are run in one fuzz cycle (0 - use default task lease timeout).
FUZZ_TEST_TIMEOUT: 0

# Fuzzer execution timeout.
FUZZER_TIMEOUT: 5400

# Increase GCE metadata server timeout to mitigate transient errors.
GCE_METADATA_TIMEOUT: 60

# Enable leak detection for ASan builds.
LSAN: false

# Maximum number of simultaneous fuzzing / testcase execution threads.
MAX_FUZZ_THREADS: 4

# Maxium number of testcases to run in one cycle.
MAX_TESTCASES: 1000

# Flag to indicate if resources used by a testcase should be minimized.
MINIMIZE_RESOURCES: true

# Package name for application (Android).
PKG_NAME: ''

# Time interval between process polls to check for crashes.
PROCESS_POLL_INTERVAL: 0.5

# URL pointing to the location of release builds on Google Cloud Storage. Unused for custom builds.
RELEASE_BUILD_BUCKET_PATH: ''

# Flag to indicate if we should force app install every time before a new task is started (Android).
REINSTALL_APP_BEFORE_EACH_TASK: false

# List of command line arguments that must not be minimized in minimization task, i.e. are always
# necessary to reproduce most crashes.
REQUIRED_APP_ARGS: ''

# Flag to determine if system temp directory (e.g. /tmp on posix platforms)
# should be cleared after every task run. This can be set to avoid interfering
# with other processes on system using the system temp directory.
SKIP_SYSTEM_TEMP_CLEANUP: false

# Flag to skip auto-closing of bug when verified.
SKIP_AUTO_CLOSE_ISSUE: false

# Default testcase crash timeout.
TEST_TIMEOUT: 10

# Minimum number of test cases before attempting stale processes cleanup.
TESTCASES_BEFORE_STALE_PROCESS_CLEANUP: 1

# Delay between executing multiple instances of an application.
THREAD_DELAY: 0.0

# Testcase timeout multiplier. For some iterations, we pick a variant multiplier to apply on
# |TEST_TIMEOUT| to do shorter and longer runs.
TIMEOUT_MULTIPLIER: 1.0

# Flag to indicate if everything should be unpacked from build or a subset of fuzz targets. This
# is only applicable for libFuzzer, AFL builds where we can selectively pick a random fuzz target
# and only unpack that.
UNPACK_ALL_FUZZ_TARGETS_AND_FILES: true

# Timeout in seconds for blocking url operations such as connection establishment.
URL_BLOCKING_OPERATIONS_TIMEOUT: 600

# Flag to indicate if user profile should be stored in memory.
USER_PROFILE_IN_MEMORY: true

# Version matching pattern to determine parsing of versions for Extended stable, Stable and Beta builds.
VERSION_PATTERN: ''

# Launch warm up time for a new build, build up its artifacts e.g. user profile directory, etc.
# On a fast multicore machine, this can be set to less than 10 seconds.
WARMUP_TIMEOUT: 120

# Watch for process exit periodically and bail out when it happens rather than timeout (Android).
WATCH_FOR_PROCESS_EXIT: false
