#cloud-config
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

users:
  - name: clusterfuzz
    uid: 1337

swap:
  filename: /var/swap
  size: 10737418240

bootcmd:
  - sysctl vm.disk_based_swap=1
  - sysctl vm.swappiness=40
  # Disable hung task checking. Otherwise we may incorrectly panic when we use
  # up CPU/disk from fuzzing or downloading large builds.
  - sysctl kernel.hung_task_timeout_secs=0
  - echo never > /sys/kernel/mm/transparent_hugepage/enabled
  - echo never > /sys/kernel/mm/transparent_hugepage/defrag
  - echo core > /proc/sys/kernel/core_pattern # for AFL
  - swapon -a

  # Note that NVIDIA_DRIVER_VERSION can be used with a particular CUDA version
  # only, e.g. CUDA 9.0 needs drivers version 384.130. CUDA and TensorFlow are
  # being installed in clusterfuzz/docker/internal-ml-with-gpu image.
  # Pre-built TensorFlow binaries require CUDA 9.0 as well, so we use this
  # config.
write_files:
  - path: /etc/bot-env
    permissions: 0644
    owner: root
    content: |
      NVIDIA_DRIVER_VERSION=418.165.02
      COS_NVIDIA_INSTALLER_CONTAINER=gcr.io/cos-cloud/cos-gpu-installer:latest
      NVIDIA_INSTALL_DIR_HOST=/var/lib/nvidia
      NVIDIA_INSTALL_DIR_CONTAINER=/usr/local/nvidia
      ROOT_MOUNT_DIR=/root
      HOME=/home/root

  - path: /etc/systemd/system/cos-gpu-installer.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Run the GPU driver installer container
      Requires=network-online.target gcr-online.target
      After=network-online.target gcr-online.target

      [Service]
      User=root
      Type=oneshot
      RemainAfterExit=true
      EnvironmentFile=/etc/bot-env
      ExecStartPre=/bin/bash -c 'mkdir -p "${NVIDIA_INSTALL_DIR_HOST}" && mount --bind "${NVIDIA_INSTALL_DIR_HOST}" "${NVIDIA_INSTALL_DIR_HOST}" && mount -o remount,exec "${NVIDIA_INSTALL_DIR_HOST}"'
      ExecStart=/usr/bin/docker run --privileged --net=host --pid=host --volume "${NVIDIA_INSTALL_DIR_HOST}":"${NVIDIA_INSTALL_DIR_CONTAINER}" --volume /dev:/dev --volume "/":"${ROOT_MOUNT_DIR}" --env-file /etc/bot-env "${COS_NVIDIA_INSTALLER_CONTAINER}"
      ExecStartPost=/bin/bash -c "${NVIDIA_INSTALL_DIR_HOST}/bin/nvidia-smi"
      StandardOutput=journal+console
      StandardError=journal+console

  - path: /etc/systemd/system/clusterfuzz.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Start ClusterFuzz
      Requires=cos-gpu-installer.service
      After=cos-gpu-installer.service

      [Service]
      EnvironmentFile=/etc/bot-env
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStart=/bin/bash -c 'export IMAGE=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/docker-image) && /usr/bin/docker pull $IMAGE && /usr/bin/docker run --memory-swappiness=40 --shm-size=1.9g --rm --net=host -e HOST_UID=1337 -P --privileged --cap-add=all -v /var/scratch0:/mnt/scratch0 -v "${NVIDIA_INSTALL_DIR_HOST}"/lib64:"${NVIDIA_INSTALL_DIR_CONTAINER}"/lib64 --device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidia-uvm:/dev/nvidia-uvm --device /dev/nvidiactl:/dev/nvidiactl --name=clusterfuzz $IMAGE'
      ExecStop=/usr/bin/docker stop clusterfuzz
      ExecStopPost=/usr/bin/docker rm clusterfuzz
      Restart=always

runcmd:
  # Set up directory for bind mount for /mnt/scratch0. /var is persistent on
  # Container Optimized OS.
  - mkdir -p /var/scratch0
  - mkdir -p /home/root
  - systemctl daemon-reload
  # Set up Nvidia GPU.
  - systemctl enable cos-gpu-installer.service
  - systemctl start cos-gpu-installer.service
  # Pull image and start ClusterFuzz.
  - systemctl start clusterfuzz.service
