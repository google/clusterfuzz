// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/cloud/datastore_v1/proto/entity.proto";

message SetupInput {
  optional google.datastore.v1.Entity fuzzer = 1;
  optional string fuzzer_name = 2;
  repeated google.datastore.v1.Entity data_bundles = 3;
  optional string fuzzer_log_upload_url = 4;
  optional string fuzzer_download_url = 5;
  optional string testcase_download_url = 6;
}

message AnalyzeTaskInput {
  repeated int64 bad_revisions = 1;
}

message SymbolizeTaskInput {
  optional string old_crash_stacktrace = 1;
}

message FuzzTaskInput {
}

message MinimizeTaskInput {
  optional string testcase_upload_url = 1;
  // TODO(pgrace): Finish this.
}

message RegressionTaskInput {
  repeated int64 bad_revisions = 1;
}

message ProgressionTaskInput {
  optional bool custom_binary = 1;
  repeated int64 bad_revisions = 2;
}

message CorpusPruningTaskInput {
  optional google.datastore.v1.Entity fuzz_target = 1;
  optional bool last_execution_failed = 2;
}

// TODO(metzman): Handle None in protobuf. Right now, it's hard to tell if a
// field was unset or set to None.
message Input {
  optional google.datastore.v1.Entity testcase = 1;
  optional google.datastore.v1.Entity testcase_upload_metadata = 2;
  optional string testcase_id = 3;
  map<string, string> uworker_env = 4;
  optional string job_type = 6;
  // uworker_io is the only module that should be using this.
  optional string uworker_output_upload_url = 7;
  optional google.datastore.v1.Entity variant = 8;
  optional string original_job_type = 9;
  optional string fuzzer_name = 10;
  optional SetupInput setup_input = 11;
  optional AnalyzeTaskInput analyze_task_input = 12;
  optional CorpusPruningTaskInput corpus_pruning_task_input = 13;
  optional FuzzTaskInput fuzz_task_input = 14;
  optional MinimizeTaskInput minimize_task_input = 15;
  optional ProgressionTaskInput progression_task_input = 16;
  optional RegressionTaskInput regression_task_input = 17;
  optional SymbolizeTaskInput symbolize_task_input = 18;
  optional string module_name = 19;
}

message SymbolizeTaskOutput {
  optional string crash_type = 1;
  optional string crash_address = 2;
  optional string crash_state = 3;
  optional string crash_stacktrace = 4;
  optional bool symbolized = 5;
  optional int32 crash_revision = 6;
  optional string build_url = 7;
}

message AnalyzeTaskOutput {
  optional int64 crash_revision = 1;
  optional string absolute_path = 2;
  optional string minimized_arguments = 3;
  optional string crash_stacktrace = 4;
  optional bool crash_info_set = 5;
  optional bool http_flag = 6;
  optional string crash_type = 7;
  optional string crash_address = 8;
  optional string crash_state = 9;
  optional bool security_flag = 10;
  optional int32 security_severity = 11;
  optional bool one_time_crasher_flag = 12;
  optional string build_key = 13;
  optional string build_url = 14;
  optional string gn_args = 15;
  optional string platform = 16;
  optional string platform_id = 17;
}

message CrashInfo{
  optional bool is_new = 1;
  optional int64 count = 2;
  optional string crash_type = 3;
  optional string crash_state = 4;
  optional bool security_flag = 5;
}

message FuzzTaskOutput {
  optional string fully_qualified_fuzzer_name = 1;
  optional string crash_revision = 2;
  optional float job_run_timestamp = 3;
  optional int64 new_crash_count = 4;
  optional int64 known_crash_count = 5;
  optional int64 testcases_executed = 6;
  repeated CrashInfo job_run_crashes = 7;
  optional int32 new_targets_count = 9;
}

message MinimizeTaskOutput {
  map<string, string> last_crash_result_dict = 1;
  optional bool flaky_stack = 2;
}

message RegressionTaskOutput {
  // TODO(https://github.com/google/clusterfuzz/issues/3008): Fill this in.
}

message VariantTaskOutput {
  optional int64 status = 1;
  optional int64 revision = 2;
  optional string crash_type = 3;
  optional string crash_state = 4;
  optional bool security_flag = 5;
  optional bool is_similar = 6;
  optional string platform = 7;
}

message BuildData{
  optional int64 revision = 1;
  optional bool is_bad_build = 2;
  optional bool should_ignore_crash_result = 3;
  optional string build_run_console_output = 4;
}

message ProgressionTaskOutput{
  optional int64 min_revision = 1;
  optional int64 max_revision = 2;
  // Set to true when latest revision or latest custom build still crash.
  optional bool crash_on_latest = 3;
  optional string crash_on_latest_message = 4;
  // Information passed back to trusted worker when we crash on latest.
  optional int64 crash_revision = 5;
  optional string last_tested_crash_stacktrace = 6;
  optional int64 last_progression_min = 7;
  optional int64 last_progression_max = 8;
  // When set to True, we delete the metadata related to: last_progression_min
  // and last_progression_max from the testcase on postprocess.
  optional bool clear_min_max_metadata = 9;
  map<string, string> issue_metadata = 10;
  repeated BuildData build_data_list = 11;
}

enum ErrorType {
  NO_ERROR = 0;
  ANALYZE_BUILD_SETUP = 1;
  ANALYZE_NO_CRASH = 2;
  ANALYZE_NO_REVISIONS_LIST = 3;
  ANALYZE_NO_REVISION_INDEX = 4;
  TESTCASE_SETUP = 5;
  UNHANDLED = 6;
  VARIANT_BUILD_SETUP = 7;
  MINIMIZE_SETUP = 8;
  FUZZ_BUILD_SETUP_FAILURE = 9;
  FUZZ_DATA_BUNDLE_SETUP_FAILURE = 10;
  FUZZ_NO_FUZZER = 11;
  PROGRESSION_REVISION_LIST_ERROR = 12;
  PROGRESSION_BUILD_NOT_FOUND = 13;
  PROGRESSION_NO_CRASH = 14;
  PROGRESSION_BAD_STATE_MIN_MAX = 15;
  PROGRESSION_TIMEOUT = 16;
  PROGRESSION_BAD_BUILD = 17;
  PROGRESSION_BUILD_SETUP_ERROR = 18;
  REGRESSION_REVISION_LIST_ERROR = 19;
  REGRESSION_BUILD_NOT_FOUND = 20;
  SYMBOLIZE_BUILD_SETUP_ERROR = 21;
}

message Output {
  optional ErrorType error_type = 3;
  // This is only to be used by code that needs to be called by utasks and
  // nonutasks.
  optional Input uworker_input = 4;
  optional float test_timeout = 5;
  optional float crash_time = 6;
  optional string crash_stacktrace_output = 7;
  optional AnalyzeTaskOutput analyze_task_output = 8;
  optional FuzzTaskOutput fuzz_task_output = 9;
  optional MinimizeTaskOutput minimize_task_output = 10;
  optional RegressionTaskOutput regression_task_output = 11;
  optional ProgressionTaskOutput progression_task_output = 12;
  optional SymbolizeTaskOutput symbolize_task_output = 13;
  optional VariantTaskOutput variant_task_output = 14;
  optional string error_message = 15;
}
