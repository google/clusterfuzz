# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from clusterfuzz.grpc import reproduce_pb2 as clusterfuzz_dot_grpc_dot_reproduce__pb2


class ReproduceServiceStub(object):
    """The main service for handling test case reproductions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartReproductionJob = channel.unary_unary(
                '/clusterfuzz.grpc.ReproduceService/StartReproductionJob',
                request_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.StartReproductionJobRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.Job.FromString,
                )
        self.SubscribeToJobUpdates = channel.unary_stream(
                '/clusterfuzz.grpc.ReproduceService/SubscribeToJobUpdates',
                request_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.JobUpdate.FromString,
                )
        self.GetJobStatus = channel.unary_unary(
                '/clusterfuzz.grpc.ReproduceService/GetJobStatus',
                request_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.GetJobStatusRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.Job.FromString,
                )
        self.GetJobResults = channel.unary_unary(
                '/clusterfuzz.grpc.ReproduceService/GetJobResults',
                request_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.GetJobResultsRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.JobResults.FromString,
                )


class ReproduceServiceServicer(object):
    """The main service for handling test case reproductions.
    """

    def StartReproductionJob(self, request, context):
        """Starts a new reproduction job. This is an asynchronous operation.
        The call returns immediately with a job identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToJobUpdates(self, request, context):
        """Subscribes to real-time updates for a given job. This is a server-streaming RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatus(self, request, context):
        """Gets the current status of a job. Can be used for polling.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobResults(self, request, context):
        """Retrieves the final results and metrics of a completed job.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReproduceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartReproductionJob': grpc.unary_unary_rpc_method_handler(
                    servicer.StartReproductionJob,
                    request_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.StartReproductionJobRequest.FromString,
                    response_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.Job.SerializeToString,
            ),
            'SubscribeToJobUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToJobUpdates,
                    request_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.SubscribeRequest.FromString,
                    response_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.JobUpdate.SerializeToString,
            ),
            'GetJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatus,
                    request_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.GetJobStatusRequest.FromString,
                    response_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.Job.SerializeToString,
            ),
            'GetJobResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobResults,
                    request_deserializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.GetJobResultsRequest.FromString,
                    response_serializer=clusterfuzz_dot_grpc_dot_reproduce__pb2.JobResults.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clusterfuzz.grpc.ReproduceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReproduceService(object):
    """The main service for handling test case reproductions.
    """

    @staticmethod
    def StartReproductionJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterfuzz.grpc.ReproduceService/StartReproductionJob',
            clusterfuzz_dot_grpc_dot_reproduce__pb2.StartReproductionJobRequest.SerializeToString,
            clusterfuzz_dot_grpc_dot_reproduce__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToJobUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/clusterfuzz.grpc.ReproduceService/SubscribeToJobUpdates',
            clusterfuzz_dot_grpc_dot_reproduce__pb2.SubscribeRequest.SerializeToString,
            clusterfuzz_dot_grpc_dot_reproduce__pb2.JobUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterfuzz.grpc.ReproduceService/GetJobStatus',
            clusterfuzz_dot_grpc_dot_reproduce__pb2.GetJobStatusRequest.SerializeToString,
            clusterfuzz_dot_grpc_dot_reproduce__pb2.Job.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJobResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterfuzz.grpc.ReproduceService/GetJobResults',
            clusterfuzz_dot_grpc_dot_reproduce__pb2.GetJobResultsRequest.SerializeToString,
            clusterfuzz_dot_grpc_dot_reproduce__pb2.JobResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
