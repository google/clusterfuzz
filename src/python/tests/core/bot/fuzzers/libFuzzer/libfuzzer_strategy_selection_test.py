# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Tests for strategy selection file."""

import os
import unittest

from bot.fuzzers import strategy
from bot.fuzzers.libFuzzer import strategy_selection
from tests.test_libs import helpers as test_helpers

class TestStrategySelectionGeneratorPatch(unittest.TestCase):
  """Tests whether program properly generates strategy
  sets for use by the launcher.

  Patches include deterministically selecting generator
  in order to cover all paths in the file."""

  def setUp(self):
    """Set up method for strategy pool generator tests with patch."""
    test_helpers.patch_environ(self)
    test_helpers.patch(self, [
        'bot.fuzzers.libFuzzer.strategy_selection.use_generator',
        'bot.fuzzers.libFuzzer.strategy_selection.do_radamsa_or_ml_rnn_generator'
    ])
    self.mock.use_generator.return_value = True
    self.mock.do_radamsa_or_ml_rnn_generator.return_value = True

  def test_radamsa_instance(self):
    """Ensures that ml rnn was not selected as a result of selecting
    radamsa as generator."""
    strategy_pool = strategy_selection.generate_strategy_pool()
    self.assertTrue(strategy_pool[strategy.CORPUS_MUTATION_RADAMSA_STRATEGY])
    self.assertFalse(strategy_pool[strategy.CORPUS_MUTATION_ML_RNN_STRATEGY])

  def test_ml_rnn_instance(self):
    """Ensures that radamsa was not selected as a result of selecting
    ml rnn as generator"""
    self.mock.do_radamsa_or_ml_rnn_generator.return_value = False
    strategy_pool = strategy_selection.generate_strategy_pool()
    self.assertFalse(strategy_pool[strategy.CORPUS_MUTATION_RADAMSA_STRATEGY])
    self.assertTrue(strategy_pool[strategy.CORPUS_MUTATION_ML_RNN_STRATEGY])

  def test_none_instance(self):
    """Ensures that neither radamsa nor ml rnn were selected as a result
    of selecting no generator."""
    self.mock.use_generator.return_value = False
    strategy_pool = strategy_selection.generate_strategy_pool()
    self.assertFalse(strategy_pool[strategy.CORPUS_MUTATION_RADAMSA_STRATEGY])
    self.assertFalse(strategy_pool[strategy.CORPUS_MUTATION_ML_RNN_STRATEGY])

class TestStrategySelectionPatchless(unittest.TestCase):
  """Tests to see whether a strategy pool is properly generated by the file.

  Radamsa and ml rnn are mutually exclusive, so we test for this."""

  def test_strategy_pool_generator(self):
    """Return whether or not radamsa and ml rnn were mutually exclusive in
    this generator iteration."""
    strategy_pool = strategy_selection.generate_strategy_pool()
    self.assertFalse(strategy_pool[strategy.CORPUS_MUTATION_RADAMSA_STRATEGY] and \
        strategy_pool[strategy.CORPUS_MUTATION_ML_RNN_STRATEGY])
