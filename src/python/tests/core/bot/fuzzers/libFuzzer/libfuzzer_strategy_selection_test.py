# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Tests for strategy selection file."""

import unittest

from bot.fuzzers import strategy
from bot.fuzzers.libFuzzer import strategy_selection
from tests.test_libs import helpers as test_helpers


class TestStrategySelectionGeneratorPatched(unittest.TestCase):
  """Tests whether program properly generates strategy
  sets for use by the launcher."""

  def setUp(self):
    """Set up method for strategy pool generator tests with patch."""
    test_helpers.patch_environ(self)
    test_helpers.patch(self,
                       ['bot.fuzzers.engine_common.decide_with_probability'])
    self.mock.decide_with_probability.return_value = True

  def test_random_pool_generator(self):
    """Deterministically tests the random strategy pool generator."""
    strategy_pool = strategy_selection.generate_strategy_pool()

    # Ml rnn and radamsa strategies are mutually exclusive. Because of how we
    # patch, ml rnn will evaluate to false, however this depends on the
    # implementation.
    self.assertTrue(
        strategy_pool.do_strategy(strategy.CORPUS_MUTATION_RADAMSA_STRATEGY))
    self.assertFalse(
        strategy_pool.do_strategy(strategy.CORPUS_MUTATION_ML_RNN_STRATEGY))
    self.assertTrue(strategy_pool.do_strategy(strategy.CORPUS_SUBSET_STRATEGY))
    self.assertTrue(
        strategy_pool.do_strategy(strategy.RANDOM_MAX_LENGTH_STRATEGY))
    self.assertTrue(
        strategy_pool.do_strategy(strategy.RECOMMENDED_DICTIONARY_STRATEGY))
    self.assertTrue(strategy_pool.do_strategy(strategy.VALUE_PROFILE_STRATEGY))
    self.assertTrue(strategy_pool.do_strategy(strategy.FORK_STRATEGY))
    self.assertTrue(strategy_pool.do_strategy(strategy.MUTATOR_PLUGIN_STRATEGY))


class TestStrategySelectionPatchless(unittest.TestCase):
  """Tests to see whether a strategy pool is properly generated by the file."""

  def test_strategy_pool_generator(self):
    """Ensures that a call to generate_strategy_pool does not yield an
    exception. Deterministic behaviors are tested in the previous test."""
    strategy_selection.generate_strategy_pool()
